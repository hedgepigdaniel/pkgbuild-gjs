@@ -, +, @@ 
 gi/closure.cpp | 4 ----
 1 file changed, 4 deletions(-)
--- a/gi/closure.cpp	
+++ a/gi/closure.cpp	
@@ -33,7 +33,6 @@ 
 #include "gjs/mem.h"
 
 struct Closure {
-    JSRuntime *runtime;
     JSContext *context;
     GjsMaybeOwned<JSObject *> obj;
     unsigned idle_clear_id;
@@ -93,7 +92,6 @@ invalidate_js_pointers(GjsClosure *gc)
 
     c->obj.reset();
     c->context = NULL;
-    c->runtime = NULL;
 
     /* Notify any closure reference holders they
      * may want to drop references.
@@ -132,7 +130,6 @@ closure_clear_idle(void *data)
 
     closure->priv.obj.reset();
     closure->priv.context = nullptr;
-    closure->priv.runtime = nullptr;
     closure->priv.idle_clear_id = 0;
 
     g_closure_unref(static_cast<GClosure *>(data));
@@ -315,7 +312,6 @@ gjs_closure_new(JSContext  *context,
     gc = (GjsClosure*) g_closure_new_simple(sizeof(GjsClosure), NULL);
     c = new (&gc->priv) Closure();
 
-    c->runtime = JS_GetRuntime(context);
     /* The saved context is used for lifetime management, so that the closure will
      * be torn down with the context that created it. The context could be attached to
      * the default context of the runtime using if we wanted the closure to survive
